// Code generated by mockery v2.53.4. DO NOT EDIT.

package repositories

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	entities "github.com/verizhang/billing-engine/src/entities"

	time "time"
)

// PaymentRepository is an autogenerated mock type for the PaymentRepository type
type PaymentRepository struct {
	mock.Mock
}

type PaymentRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *PaymentRepository) EXPECT() *PaymentRepository_Expecter {
	return &PaymentRepository_Expecter{mock: &_m.Mock}
}

// CreatePayments provides a mock function with given fields: ctx, payments
func (_m *PaymentRepository) CreatePayments(ctx context.Context, payments []*entities.Payment) error {
	ret := _m.Called(ctx, payments)

	if len(ret) == 0 {
		panic("no return value specified for CreatePayments")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []*entities.Payment) error); ok {
		r0 = rf(ctx, payments)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PaymentRepository_CreatePayments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePayments'
type PaymentRepository_CreatePayments_Call struct {
	*mock.Call
}

// CreatePayments is a helper method to define mock.On call
//   - ctx context.Context
//   - payments []*entities.Payment
func (_e *PaymentRepository_Expecter) CreatePayments(ctx interface{}, payments interface{}) *PaymentRepository_CreatePayments_Call {
	return &PaymentRepository_CreatePayments_Call{Call: _e.mock.On("CreatePayments", ctx, payments)}
}

func (_c *PaymentRepository_CreatePayments_Call) Run(run func(ctx context.Context, payments []*entities.Payment)) *PaymentRepository_CreatePayments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]*entities.Payment))
	})
	return _c
}

func (_c *PaymentRepository_CreatePayments_Call) Return(_a0 error) *PaymentRepository_CreatePayments_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PaymentRepository_CreatePayments_Call) RunAndReturn(run func(context.Context, []*entities.Payment) error) *PaymentRepository_CreatePayments_Call {
	_c.Call.Return(run)
	return _c
}

// GetPaymentByLoanID provides a mock function with given fields: ctx, loanID
func (_m *PaymentRepository) GetPaymentByLoanID(ctx context.Context, loanID string) ([]*entities.Payment, error) {
	ret := _m.Called(ctx, loanID)

	if len(ret) == 0 {
		panic("no return value specified for GetPaymentByLoanID")
	}

	var r0 []*entities.Payment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*entities.Payment, error)); ok {
		return rf(ctx, loanID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*entities.Payment); ok {
		r0 = rf(ctx, loanID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Payment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, loanID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PaymentRepository_GetPaymentByLoanID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPaymentByLoanID'
type PaymentRepository_GetPaymentByLoanID_Call struct {
	*mock.Call
}

// GetPaymentByLoanID is a helper method to define mock.On call
//   - ctx context.Context
//   - loanID string
func (_e *PaymentRepository_Expecter) GetPaymentByLoanID(ctx interface{}, loanID interface{}) *PaymentRepository_GetPaymentByLoanID_Call {
	return &PaymentRepository_GetPaymentByLoanID_Call{Call: _e.mock.On("GetPaymentByLoanID", ctx, loanID)}
}

func (_c *PaymentRepository_GetPaymentByLoanID_Call) Run(run func(ctx context.Context, loanID string)) *PaymentRepository_GetPaymentByLoanID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *PaymentRepository_GetPaymentByLoanID_Call) Return(_a0 []*entities.Payment, _a1 error) *PaymentRepository_GetPaymentByLoanID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PaymentRepository_GetPaymentByLoanID_Call) RunAndReturn(run func(context.Context, string) ([]*entities.Payment, error)) *PaymentRepository_GetPaymentByLoanID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePaidAtPayment provides a mock function with given fields: ctx, ID, paidAt
func (_m *PaymentRepository) UpdatePaidAtPayment(ctx context.Context, ID string, paidAt *time.Time) error {
	ret := _m.Called(ctx, ID, paidAt)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePaidAtPayment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *time.Time) error); ok {
		r0 = rf(ctx, ID, paidAt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PaymentRepository_UpdatePaidAtPayment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePaidAtPayment'
type PaymentRepository_UpdatePaidAtPayment_Call struct {
	*mock.Call
}

// UpdatePaidAtPayment is a helper method to define mock.On call
//   - ctx context.Context
//   - ID string
//   - paidAt *time.Time
func (_e *PaymentRepository_Expecter) UpdatePaidAtPayment(ctx interface{}, ID interface{}, paidAt interface{}) *PaymentRepository_UpdatePaidAtPayment_Call {
	return &PaymentRepository_UpdatePaidAtPayment_Call{Call: _e.mock.On("UpdatePaidAtPayment", ctx, ID, paidAt)}
}

func (_c *PaymentRepository_UpdatePaidAtPayment_Call) Run(run func(ctx context.Context, ID string, paidAt *time.Time)) *PaymentRepository_UpdatePaidAtPayment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*time.Time))
	})
	return _c
}

func (_c *PaymentRepository_UpdatePaidAtPayment_Call) Return(_a0 error) *PaymentRepository_UpdatePaidAtPayment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PaymentRepository_UpdatePaidAtPayment_Call) RunAndReturn(run func(context.Context, string, *time.Time) error) *PaymentRepository_UpdatePaidAtPayment_Call {
	_c.Call.Return(run)
	return _c
}

// NewPaymentRepository creates a new instance of PaymentRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPaymentRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *PaymentRepository {
	mock := &PaymentRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
