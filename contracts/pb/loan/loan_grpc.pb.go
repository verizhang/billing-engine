// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.20.3
// source: loan.proto

package loanpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Loan_CreateLoan_FullMethodName     = "/loan.loan/CreateLoan"
	Loan_GetOutstanding_FullMethodName = "/loan.loan/GetOutstanding"
	Loan_IsDelinquent_FullMethodName   = "/loan.loan/IsDelinquent"
)

// LoanClient is the client API for Loan service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LoanClient interface {
	CreateLoan(ctx context.Context, in *CreateLoanRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetOutstanding(ctx context.Context, in *GetOutstandingRequest, opts ...grpc.CallOption) (*GetOutstandingResponse, error)
	IsDelinquent(ctx context.Context, in *GetIsDelinquentRequest, opts ...grpc.CallOption) (*GetIsDelinquentResponse, error)
}

type loanClient struct {
	cc grpc.ClientConnInterface
}

func NewLoanClient(cc grpc.ClientConnInterface) LoanClient {
	return &loanClient{cc}
}

func (c *loanClient) CreateLoan(ctx context.Context, in *CreateLoanRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Loan_CreateLoan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loanClient) GetOutstanding(ctx context.Context, in *GetOutstandingRequest, opts ...grpc.CallOption) (*GetOutstandingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOutstandingResponse)
	err := c.cc.Invoke(ctx, Loan_GetOutstanding_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loanClient) IsDelinquent(ctx context.Context, in *GetIsDelinquentRequest, opts ...grpc.CallOption) (*GetIsDelinquentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetIsDelinquentResponse)
	err := c.cc.Invoke(ctx, Loan_IsDelinquent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoanServer is the server API for Loan service.
// All implementations must embed UnimplementedLoanServer
// for forward compatibility.
type LoanServer interface {
	CreateLoan(context.Context, *CreateLoanRequest) (*emptypb.Empty, error)
	GetOutstanding(context.Context, *GetOutstandingRequest) (*GetOutstandingResponse, error)
	IsDelinquent(context.Context, *GetIsDelinquentRequest) (*GetIsDelinquentResponse, error)
	mustEmbedUnimplementedLoanServer()
}

// UnimplementedLoanServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLoanServer struct{}

func (UnimplementedLoanServer) CreateLoan(context.Context, *CreateLoanRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLoan not implemented")
}
func (UnimplementedLoanServer) GetOutstanding(context.Context, *GetOutstandingRequest) (*GetOutstandingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOutstanding not implemented")
}
func (UnimplementedLoanServer) IsDelinquent(context.Context, *GetIsDelinquentRequest) (*GetIsDelinquentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsDelinquent not implemented")
}
func (UnimplementedLoanServer) mustEmbedUnimplementedLoanServer() {}
func (UnimplementedLoanServer) testEmbeddedByValue()              {}

// UnsafeLoanServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoanServer will
// result in compilation errors.
type UnsafeLoanServer interface {
	mustEmbedUnimplementedLoanServer()
}

func RegisterLoanServer(s grpc.ServiceRegistrar, srv LoanServer) {
	// If the following call pancis, it indicates UnimplementedLoanServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Loan_ServiceDesc, srv)
}

func _Loan_CreateLoan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLoanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanServer).CreateLoan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Loan_CreateLoan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanServer).CreateLoan(ctx, req.(*CreateLoanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loan_GetOutstanding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOutstandingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanServer).GetOutstanding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Loan_GetOutstanding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanServer).GetOutstanding(ctx, req.(*GetOutstandingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loan_IsDelinquent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIsDelinquentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanServer).IsDelinquent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Loan_IsDelinquent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanServer).IsDelinquent(ctx, req.(*GetIsDelinquentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Loan_ServiceDesc is the grpc.ServiceDesc for Loan service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Loan_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "loan.loan",
	HandlerType: (*LoanServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLoan",
			Handler:    _Loan_CreateLoan_Handler,
		},
		{
			MethodName: "GetOutstanding",
			Handler:    _Loan_GetOutstanding_Handler,
		},
		{
			MethodName: "IsDelinquent",
			Handler:    _Loan_IsDelinquent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "loan.proto",
}
