// Code generated by mockery v2.53.4. DO NOT EDIT.

package repositories

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	entities "github.com/verizhang/billing-engine/src/entities"
)

// LoanRepository is an autogenerated mock type for the LoanRepository type
type LoanRepository struct {
	mock.Mock
}

type LoanRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *LoanRepository) EXPECT() *LoanRepository_Expecter {
	return &LoanRepository_Expecter{mock: &_m.Mock}
}

// CreateLoan provides a mock function with given fields: ctx, loan
func (_m *LoanRepository) CreateLoan(ctx context.Context, loan *entities.Loan) error {
	ret := _m.Called(ctx, loan)

	if len(ret) == 0 {
		panic("no return value specified for CreateLoan")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Loan) error); ok {
		r0 = rf(ctx, loan)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LoanRepository_CreateLoan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateLoan'
type LoanRepository_CreateLoan_Call struct {
	*mock.Call
}

// CreateLoan is a helper method to define mock.On call
//   - ctx context.Context
//   - loan *entities.Loan
func (_e *LoanRepository_Expecter) CreateLoan(ctx interface{}, loan interface{}) *LoanRepository_CreateLoan_Call {
	return &LoanRepository_CreateLoan_Call{Call: _e.mock.On("CreateLoan", ctx, loan)}
}

func (_c *LoanRepository_CreateLoan_Call) Run(run func(ctx context.Context, loan *entities.Loan)) *LoanRepository_CreateLoan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.Loan))
	})
	return _c
}

func (_c *LoanRepository_CreateLoan_Call) Return(_a0 error) *LoanRepository_CreateLoan_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LoanRepository_CreateLoan_Call) RunAndReturn(run func(context.Context, *entities.Loan) error) *LoanRepository_CreateLoan_Call {
	_c.Call.Return(run)
	return _c
}

// GetActiveLoansByUserID provides a mock function with given fields: ctx, userID
func (_m *LoanRepository) GetActiveLoansByUserID(ctx context.Context, userID string) ([]*entities.Loan, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetActiveLoansByUserID")
	}

	var r0 []*entities.Loan
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*entities.Loan, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*entities.Loan); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Loan)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoanRepository_GetActiveLoansByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetActiveLoansByUserID'
type LoanRepository_GetActiveLoansByUserID_Call struct {
	*mock.Call
}

// GetActiveLoansByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *LoanRepository_Expecter) GetActiveLoansByUserID(ctx interface{}, userID interface{}) *LoanRepository_GetActiveLoansByUserID_Call {
	return &LoanRepository_GetActiveLoansByUserID_Call{Call: _e.mock.On("GetActiveLoansByUserID", ctx, userID)}
}

func (_c *LoanRepository_GetActiveLoansByUserID_Call) Run(run func(ctx context.Context, userID string)) *LoanRepository_GetActiveLoansByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *LoanRepository_GetActiveLoansByUserID_Call) Return(_a0 []*entities.Loan, _a1 error) *LoanRepository_GetActiveLoansByUserID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LoanRepository_GetActiveLoansByUserID_Call) RunAndReturn(run func(context.Context, string) ([]*entities.Loan, error)) *LoanRepository_GetActiveLoansByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateIsActiveLoanByID provides a mock function with given fields: ctx, ID, isActive
func (_m *LoanRepository) UpdateIsActiveLoanByID(ctx context.Context, ID string, isActive bool) error {
	ret := _m.Called(ctx, ID, isActive)

	if len(ret) == 0 {
		panic("no return value specified for UpdateIsActiveLoanByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) error); ok {
		r0 = rf(ctx, ID, isActive)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LoanRepository_UpdateIsActiveLoanByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateIsActiveLoanByID'
type LoanRepository_UpdateIsActiveLoanByID_Call struct {
	*mock.Call
}

// UpdateIsActiveLoanByID is a helper method to define mock.On call
//   - ctx context.Context
//   - ID string
//   - isActive bool
func (_e *LoanRepository_Expecter) UpdateIsActiveLoanByID(ctx interface{}, ID interface{}, isActive interface{}) *LoanRepository_UpdateIsActiveLoanByID_Call {
	return &LoanRepository_UpdateIsActiveLoanByID_Call{Call: _e.mock.On("UpdateIsActiveLoanByID", ctx, ID, isActive)}
}

func (_c *LoanRepository_UpdateIsActiveLoanByID_Call) Run(run func(ctx context.Context, ID string, isActive bool)) *LoanRepository_UpdateIsActiveLoanByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(bool))
	})
	return _c
}

func (_c *LoanRepository_UpdateIsActiveLoanByID_Call) Return(_a0 error) *LoanRepository_UpdateIsActiveLoanByID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LoanRepository_UpdateIsActiveLoanByID_Call) RunAndReturn(run func(context.Context, string, bool) error) *LoanRepository_UpdateIsActiveLoanByID_Call {
	_c.Call.Return(run)
	return _c
}

// NewLoanRepository creates a new instance of LoanRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLoanRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *LoanRepository {
	mock := &LoanRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
